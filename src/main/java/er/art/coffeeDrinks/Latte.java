package er.art.coffeeDrinks;import er.art.CoffeDrinks;import er.art.CoffeeMachine;public class Latte implements CoffeDrinks {    private final int sizeDrink;    private final StringBuilder outStr = new StringBuilder ();    private final CoffeeMachine coffeeMachine;    private int water;    private int coffee;    private int milk;    boolean isTrueCalc = true;    public Latte (CoffeeMachine coffeeMachine, int sizeDrink) {        this.sizeDrink = sizeDrink;        this.coffeeMachine = coffeeMachine;        water = 0;        coffee = 0;        milk = 0;    }    @Override    public void calkOfIngredients () {        water = (int) Math.round ( sizeDrink * 0.3d );        coffee = (int) Math.round ( sizeDrink * 0.1d );        milk = (int) Math.round ( sizeDrink * 0.6d );        int waterIndex = coffeeMachine.getIndexWater ();        int coffeeIndex = coffeeMachine.getIndexCoffee ();        int milkIndex = coffeeMachine.getIndexMilk ();        if (waterIndex < water | coffeeIndex < coffee | milkIndex < milk) {            isTrueCalc = false;            outStr.append ( "Не хватает ингредиентов. Нужно пополнить запасы!" );        }        else {            coffeeMachine.setIndexWater ( waterIndex -= water );            coffeeMachine.setIndexCoffee ( coffeeIndex -= coffee );            coffeeMachine.setIndexMilk ( milkIndex -=milk );            outStr.append ( coffeeIndex ).append ( " " ).append ( waterIndex ).append ( " " ).append ( milkIndex );        }    }    @Override    public String getName () {        return "Latte";    }    @Override    public String toString () {        if (isTrueCalc)            return outStr.append ( " ---> (Ваш " ).append ( this.getName () ).append ( " готов)" ).toString ();        else return outStr.append ( "\n" + coffeeMachine.getValueCMachine () + "\n" ).toString ();    }}