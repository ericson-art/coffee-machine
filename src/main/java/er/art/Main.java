package er.art;import er.art.drinks.*;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.Locale;public class Main {    public static void main (String[] args) throws IOException {        CoffeeMachine coffeeMachine = new CoffeeMachine ( args[0], args[1], args[2] );        BufferedReader reader = new BufferedReader ( new InputStreamReader ( System.in ) );        var drinkList = coffeeMachine.getDrinkList ();        var commandAddList = coffeeMachine.getCommandList ();        while (true) {            String input = reader.readLine ();            input = input.toLowerCase ( Locale.ROOT ).trim ().replaceAll ( "\\s+", " " );            String[] inputArray = input.split ( " " );            try {                if (input.equals ( "" )) {                    throw new MyException ( "Ошибка! Команда не введена." );                }                if (inputArray.length > 2 | inputArray.length == 1) {                    throw new MyException ( "Ошибка! Команда должна состоять из 2-х аргументов." );                }                if (input.equals ( "turn off" )) System.exit ( 0 );            } catch (MyException e) {                System.out.println ( e.getMessage () );                continue;            }            boolean isNumber;            isNumber = false;            int size;            size = 0;            String command;            command = "";            try {                if (inputArray.length == 2) {                    command = inputArray[0];                    if (!(drinkList.contains ( command )) && !(commandAddList.contains ( command ))) {                        throw new MyException ( "Несуществующая команда" );                    }                    else {                        isNumber = isNumber ( inputArray[1] );                        if (isNumber) {                            if (commandAddList.contains ( command )) {                                size = Integer.parseInt ( inputArray[1] );                            }                            if (drinkList.contains ( command )) {                                size = Integer.parseInt ( inputArray[1] );                                if (size < 10)                                    throw new MyException ( "Объем напитка не может быть меньше 10 мл." );                            }                        }                        else {                            throw new MyException ( "Объём напитка должен быть числом." );                        }                    }                }            } catch (Exception e) {                System.out.println ( e.getMessage () );                continue;            }            switch ( command ) {                case "ristretto":                    var ristretto = new Ristretto ( coffeeMachine, size );                    coffeeMachine.makeDrink ( ristretto );                    break;                case "cappuccino":                    var cappuccino = new Cappuccino ( coffeeMachine, size );                    coffeeMachine.makeDrink ( cappuccino );                    break;                case "lungo":                    var lungo = new Lungo ( coffeeMachine, size );                    coffeeMachine.makeDrink ( lungo );                    break;                case "espresso":                    var espresso = new Espresso ( coffeeMachine, size );                    coffeeMachine.makeDrink ( espresso );                    break;                case "latte":                    var latte = new Latte ( coffeeMachine, size );                    coffeeMachine.makeDrink ( latte );                    break;            }            StringBuilder level;            level = new StringBuilder ();            switch ( command ) {                case "water":                    coffeeMachine.setIndexWater ( coffeeMachine.getIndexWater () + size );                    printMachineLevel ( level, coffeeMachine );                    break;                case "milk":                    coffeeMachine.setIndexMilk ( coffeeMachine.getIndexMilk () + size );                    printMachineLevel ( level, coffeeMachine );                    break;                case "coffee":                    coffeeMachine.setIndexCoffee ( coffeeMachine.getIndexCoffee () + size );                    printMachineLevel ( level, coffeeMachine );                    break;            }        }    }    private static void printMachineLevel (StringBuilder level, CoffeeMachine coffeeMachine) {        level.append ( coffeeMachine.getIndexCoffee () ).append ( " " ).append ( coffeeMachine.getIndexWater () ).append ( " " ).append ( coffeeMachine.getIndexMilk () );        System.out.println ( level );    }    public static boolean isNumber (String str) {        try {            Integer.parseInt ( str );            return true;        } catch (NumberFormatException e) {            return false;        }    }}